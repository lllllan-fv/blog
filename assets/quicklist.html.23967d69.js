import{_ as a}from"./plugin-vue_export-helper.21dcd24c.js";import{r as e,c as p,a as s,b as t,F as o,d as l,e as c,o as i}from"./app.af53d2d3.js";var r="/assets/Snipaste_2022-05-14_10-20-50.7578a39b.jpg";const u={},k=l('<blockquote><p>QuickList\uFF0C\u5FEB\u8868\u3002</p><p>QucikList \u662F\u4EE5 ZipList \u4E3A\u8282\u70B9\u7684\u53CC\u7AEF\u94FE\u8868\uFF0C\u5B8F\u89C2\u4E0A\u662F\u4E00\u4E2A\u94FE\u8868\uFF0C\u5FAE\u89C2\u4E0A\u6BCF\u4E2A\u8282\u70B9\u90FD\u662F\u4E00\u4E2A ZipList</p></blockquote><h2 id="ziplist-\u7684\u7F3A\u9677" tabindex="-1"><a class="header-anchor" href="#ziplist-\u7684\u7F3A\u9677" aria-hidden="true">#</a> ZipList \u7684\u7F3A\u9677</h2><p>\u5F80\u524D\u7FFB\u4E00\u9875\u4F60\u5C31\u77E5\u9053\u4E86\uFF0CZipList \u7684\u4F18\u7F3A\u90FD\u5F88\u660E\u663E</p><h3 id="\u4F18\u70B9" tabindex="-1"><a class="header-anchor" href="#\u4F18\u70B9" aria-hidden="true">#</a> \u4F18\u70B9</h3><ul><li>\u8282\u7701\u7A7A\u95F4</li><li>\u7533\u8BF7\u8FDE\u7EED\u5185\u5B58\u80FD\u591F\u6709\u6548\u5229\u7528 CPU \u7F13\u5B58</li></ul><h3 id="\u7F3A\u70B9" tabindex="-1"><a class="header-anchor" href="#\u7F3A\u70B9" aria-hidden="true">#</a> \u7F3A\u70B9</h3><ul><li>\u4E0D\u9884\u7559\u7A7A\u95F4\u548C\u7ACB\u5373\u7F29\u5BB9\u7684\u7279\u70B9\uFF0C\u6BCF\u6B21\u5199\u64CD\u4F5C\u90FD\u4F1A\u5F15\u8D77\u5185\u5B58\u7684\u91CD\u65B0\u5206\u914D</li><li>\u56E0\u4E3A prevlen \u7684\u5B58\u5728\uFF0C\u5355\u4E2A\u8282\u70B9\u7684\u4FEE\u6539\u53EF\u80FD\u4F1A\u9020\u6210\u8FDE\u9501\u66F4\u65B0</li></ul><blockquote><p>Redis \u4E3A\u4E86\u66F4\u597D\u5229\u7528 ZipList \u7684\u4F18\u52BF\uFF0C\u5408\u7406\u89C4\u907F\u52A3\u52BF\uFF0C<strong>\u51B3\u5B9A\u5C06 ZipList \u4F5C\u4E3A\u94FE\u8868\u7684\u8282\u70B9</strong></p></blockquote><h2 id="quicklist-\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#quicklist-\u7ED3\u6784" aria-hidden="true">#</a> QuickList \u7ED3\u6784</h2><p><img src="'+r+`" alt="Snipaste_2022-05-14_10-20-50" loading="lazy"></p><ul><li><code>quicklistNode</code>\uFF0Cquicklist \u94FE\u8868\u4E2D\u7684\u7ED3\u70B9\uFF0C\u5B83\u901A\u8FC7 zl \u5B57\u6BB5\u6301\u6709\u5E95\u5C42\u7684 ziplist</li><li><code>quicklistLZF</code>\uFF0Cziplist \u662F\u4E00\u6BB5\u8FDE\u7EED\u7684\u5185\u5B58\uFF0C\u7528 LZ4 \u7B97\u6CD5\u538B\u7F29\u540E\uFF0C\u5C31\u53EF\u4EE5\u5305\u88C5\u6210\u4E00\u4E2A quicklistLZF \u7ED3\u6784</li><li><code>quicklistBookmark</code>\uFF0C<s>\uFF1F\u6CA1\u770B\u61C2\u662F\u5E72\u561B\u7684</s></li><li><code>quicklist</code>\uFF0C\u53CC\u7AEF\u94FE\u8868\u7684\u5B9A\u4E49\u3002 <ul><li>head\uFF0Ctail \u5206\u522B\u6307\u5411\u5934\u5C3E\u6307\u9488</li><li>len \u4EE3\u8868\u94FE\u8868\u4E2D\u7684\u7ED3\u70B9</li><li>count \u6307\u7684\u662F\u6574\u4E2A quicklist \u4E2D\u7684\u6240\u6709 ziplist \u4E2D\u7684 entry \u7684\u6570\u76EE</li><li>fill \u5B57\u6BB5\u5F71\u54CD\u7740\u6BCF\u4E2A\u94FE\u8868\u7ED3\u70B9\u4E2D ziplist \u7684\u6700\u5927\u5360\u7528\u7A7A\u95F4</li><li>compress \u5F71\u54CD\u7740\u662F\u5426\u8981\u5BF9\u6BCF\u4E2A ziplist \u4EE5 LZ4 \u7B97\u6CD5\u8FDB\u884C\u8FDB\u4E00\u6B65\u538B\u7F29\u4EE5\u66F4\u8282\u7701\u5185\u5B58\u7A7A\u95F4.</li></ul></li><li><code>quicklistIter</code> \u662F\u4E00\u4E2A\u8FED\u4EE3\u5668</li><li><code>quicklistEntry</code> \u662F\u5BF9 ziplist \u4E2D\u7684 entry \u6982\u5FF5\u7684\u5C01\u88C5\u3002quicklist \u4F5C\u4E3A\u4E00\u4E2A\u5C01\u88C5\u826F\u597D\u7684\u6570\u636E\u7ED3\u6784\uFF0C\u4E0D\u5E0C\u671B\u4F7F\u7528\u8005\u611F\u77E5\u5230\u5176\u5185\u90E8\u7684\u5B9E\u73B0\uFF0C\u6240\u4EE5\u9700\u8981\u628A ziplist.entry \u7684\u6982\u5FF5\u91CD\u65B0\u5305\u88C5\u4E00\u4E0B</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/* Node, quicklist, and Iterator are the only data structures used currently. */</span>

<span class="token comment">/* quicklistNode is a 32 byte struct describing a ziplist for a quicklist.
 * We use bit fields keep the quicklistNode at 32 bytes.
 * count: 16 bits, max 65536 (max zl bytes is 65k, so max count actually &lt; 32k).
 * encoding: 2 bits, RAW=1, LZF=2.
 * container: 2 bits, NONE=1, ZIPLIST=2.
 * recompress: 1 bit, bool, true if node is temporarry decompressed for usage.
 * attempted_compress: 1 bit, boolean, used for verifying during testing.
 * extra: 10 bits, free for future use; pads out the remainder of 32 bits */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">quicklistNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">quicklistNode</span> <span class="token operator">*</span>prev<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">quicklistNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>zl<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> sz<span class="token punctuation">;</span>             <span class="token comment">/* ziplist size in bytes */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count <span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">;</span>     <span class="token comment">/* count of items in ziplist */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> encoding <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token comment">/* RAW==1 or LZF==2 */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> container <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">/* NONE==1 or ZIPLIST==2 */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> recompress <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">/* was this node previous compressed? */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> attempted_compress <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">/* node can&#39;t compress; too small */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> extra <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">/* more bits to steal for future usage */</span>
<span class="token punctuation">}</span> quicklistNode<span class="token punctuation">;</span>

<span class="token comment">/* quicklistLZF is a 4+N byte struct holding &#39;sz&#39; followed by &#39;compressed&#39;.
 * &#39;sz&#39; is byte length of &#39;compressed&#39; field.
 * &#39;compressed&#39; is LZF data with total (compressed) length &#39;sz&#39;
 * NOTE: uncompressed length is stored in quicklistNode-&gt;sz.
 * When quicklistNode-&gt;zl is compressed, node-&gt;zl points to a quicklistLZF */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">quicklistLZF</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> sz<span class="token punctuation">;</span> <span class="token comment">/* LZF size in bytes*/</span>
    <span class="token keyword">char</span> compressed<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> quicklistLZF<span class="token punctuation">;</span>

<span class="token comment">/* Bookmarks are padded with realloc at the end of of the quicklist struct.
 * They should only be used for very big lists if thousands of nodes were the
 * excess memory usage is negligible, and there&#39;s a real need to iterate on them
 * in portions.
 * When not used, they don&#39;t add any memory overhead, but when used and then
 * deleted, some overhead remains (to avoid resonance).
 * The number of bookmarks used should be kept to minimum since it also adds
 * overhead on node deletion (searching for a bookmark to update). */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">quicklistBookmark</span> <span class="token punctuation">{</span>
    quicklistNode <span class="token operator">*</span>node<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>
<span class="token punctuation">}</span> quicklistBookmark<span class="token punctuation">;</span>


<span class="token comment">/* quicklist is a 40 byte struct (on 64-bit systems) describing a quicklist.
 * &#39;count&#39; is the number of total entries.
 * &#39;len&#39; is the number of quicklist nodes.
 * &#39;compress&#39; is: -1 if compression disabled, otherwise it&#39;s the number
 *                of quicklistNodes to leave uncompressed at ends of quicklist.
 * &#39;fill&#39; is the user-requested (or default) fill factor.
 * &#39;bookmakrs are an optional feature that is used by realloc this struct,
 *      so that they don&#39;t consume memory when not used. */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">quicklist</span> <span class="token punctuation">{</span>
    quicklistNode <span class="token operator">*</span>head<span class="token punctuation">;</span>
    quicklistNode <span class="token operator">*</span>tail<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> count<span class="token punctuation">;</span>        <span class="token comment">/* total count of all entries in all ziplists */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> len<span class="token punctuation">;</span>          <span class="token comment">/* number of quicklistNodes */</span>
    <span class="token keyword">int</span> fill <span class="token operator">:</span> QL_FILL_BITS<span class="token punctuation">;</span>              <span class="token comment">/* fill factor for individual nodes */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> compress <span class="token operator">:</span> QL_COMP_BITS<span class="token punctuation">;</span> <span class="token comment">/* depth of end nodes not to compress;0=off */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> bookmark_count<span class="token operator">:</span> QL_BM_BITS<span class="token punctuation">;</span>
    quicklistBookmark bookmarks<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> quicklist<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">quicklistIter</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> quicklist <span class="token operator">*</span>quicklist<span class="token punctuation">;</span>
    quicklistNode <span class="token operator">*</span>current<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>zi<span class="token punctuation">;</span>
    <span class="token keyword">long</span> offset<span class="token punctuation">;</span> <span class="token comment">/* offset in current ziplist */</span>
    <span class="token keyword">int</span> direction<span class="token punctuation">;</span>
<span class="token punctuation">}</span> quicklistIter<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">quicklistEntry</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> quicklist <span class="token operator">*</span>quicklist<span class="token punctuation">;</span>
    quicklistNode <span class="token operator">*</span>node<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>zi<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>value<span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> longval<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> sz<span class="token punctuation">;</span>
    <span class="token keyword">int</span> offset<span class="token punctuation">;</span>
<span class="token punctuation">}</span> quicklistEntry<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br></div></div><h2 id="\u603B\u7ED3" tabindex="-1"><a class="header-anchor" href="#\u603B\u7ED3" aria-hidden="true">#</a> \u603B\u7ED3</h2><ol><li>List \u4F5C\u4E3A\u6700\u4F20\u7EDF\u7684\u94FE\u8868\uFF0C\u6307\u9488\u5B57\u6BB5\u6307\u5411\u4E0B\u4E00\u8282\u70B9\uFF0C\u4F46\u662F\u8BE5\u5B57\u6BB5\u4F1A\u6D88\u8017\u5927\u91CF\u5185\u5B58</li><li>ZipList \u89E3\u51B3\u4E86\u6D88\u8017\u5185\u5B58\u7684\u95EE\u9898\uFF0C\u4F46\u5F15\u5165\u4E86\u65B0\u7684\u95EE\u9898\uFF1A\u6BCF\u6B21\u5199\u64CD\u4F5C\u90FD\u4F1A\u5F15\u8D77\u5185\u5B58\u7684\u91CD\u65B0\u5206\u914D</li><li>QuickList \u5728\u8FD9\u4E24\u8005\u4E4B\u95F4\u505A\u4E86\u4E00\u4E2A\u5E73\u8861\uFF0C\u4F7F\u7528 ZipList \u4F5C\u4E3A\u8282\u70B9\u80FD\u591F\u6709\u6548\u8282\u7701\u7A7A\u95F4\u548C\u5229\u7528 CPU \u7F13\u5B58\uFF0C\u5E76\u4E14\u901A\u8FC7\u63A7\u5236 ZipList \u7684\u5927\u5C0F\u6765\u89C4\u907F\u8FDE\u9501\u66F4\u65B0\u7684\u95EE\u9898</li></ol><h2 id="\u53C2\u8003" tabindex="-1"><a class="header-anchor" href="#\u53C2\u8003" aria-hidden="true">#</a> \u53C2\u8003</h2>`,15),d={href:"https://pdai.tech/md/db/nosql-redis/db-redis-x-redis-ds.html#%E5%BF%AB%E8%A1%A8---quicklist",target:"_blank",rel:"noopener noreferrer"},b=c("Redis\u8FDB\u9636 - \u6570\u636E\u7ED3\u6784\uFF1A\u5E95\u5C42\u6570\u636E\u7ED3\u6784\u8BE6\u89E3 | Java \u5168\u6808\u77E5\u8BC6\u4F53\u7CFB (pdai.tech)");function m(h,y){const n=e("ExternalLinkIcon");return i(),p(o,null,[k,s("ul",null,[s("li",null,[s("a",d,[b,t(n)])])])],64)}var q=a(u,[["render",m],["__file","quicklist.html.vue"]]);export{q as default};
